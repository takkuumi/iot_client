// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<bool> bleValidateResponse({required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ble_validate_response(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kBleValidateResponseConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleValidateResponseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_validate_response",
        argNames: ["data"],
      );

  Future<Uint16List?> bleResponseParseU16(
      {required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ble_response_parse_u16(port_, arg0),
      parseSuccessData: _wire2api_opt_uint_16_list,
      constMeta: kBleResponseParseU16ConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleResponseParseU16ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_response_parse_u16",
        argNames: ["data"],
      );

  Future<Uint8List?> bleResponseParseBool(
      {required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ble_response_parse_bool(port_, arg0),
      parseSuccessData: _wire2api_opt_uint_8_list,
      constMeta: kBleResponseParseBoolConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleResponseParseBoolConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_response_parse_bool",
        argNames: ["data"],
      );

  Future<SerialResponse> bleGetNdid({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_get_ndid(port_),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleGetNdidConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleGetNdidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_get_ndid",
        argNames: [],
      );

  Future<SerialResponse> bleAtNdrpt(
      {required String id,
      required String data,
      required int retry,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(data);
    var arg2 = api2wire_u8(retry);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ble_at_ndrpt(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleAtNdrptConstMeta,
      argValues: [id, data, retry],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleAtNdrptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_at_ndrpt",
        argNames: ["id", "data", "retry"],
      );

  Future<SerialResponse> bleAtNdrptData(
      {required String id,
      required String data,
      required int retry,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(data);
    var arg2 = api2wire_u8(retry);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_ble_at_ndrpt_data(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleAtNdrptDataConstMeta,
      argValues: [id, data, retry],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleAtNdrptDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_at_ndrpt_data",
        argNames: ["id", "data", "retry"],
      );

  Future<SerialResponse> bleAtNdrptTest({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_at_ndrpt_test(port_),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleAtNdrptTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleAtNdrptTestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_at_ndrpt_test",
        argNames: [],
      );

  Future<SerialResponse> bleSetNdid({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_set_ndid(port_, arg0),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleSetNdidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleSetNdidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_set_ndid",
        argNames: ["id"],
      );

  Future<SerialResponse> bleSetMode({required int mode, dynamic hint}) {
    var arg0 = api2wire_u8(mode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_set_mode(port_, arg0),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleSetModeConstMeta,
      argValues: [mode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleSetModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_set_mode",
        argNames: ["mode"],
      );

  Future<SerialResponse> bleNdreset({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_ndreset(port_),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleNdresetConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleNdresetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_ndreset",
        argNames: [],
      );

  Future<SerialResponse> bleRestore({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_restore(port_),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleRestoreConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleRestoreConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_restore",
        argNames: [],
      );

  Future<SerialResponse> bleReboot({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_reboot(port_),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleRebootConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleRebootConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_reboot",
        argNames: [],
      );

  Future<SerialResponse> bleScan({required int typee, dynamic hint}) {
    var arg0 = api2wire_u8(typee);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_scan(port_, arg0),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleScanConstMeta,
      argValues: [typee],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleScanConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_scan",
        argNames: ["typee"],
      );

  Future<SerialResponse> bleLecconn(
      {required String addr, required int addType, dynamic hint}) {
    var arg0 = _platform.api2wire_String(addr);
    var arg1 = api2wire_u8(addType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_lecconn(port_, arg0, arg1),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleLecconnConstMeta,
      argValues: [addr, addType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleLecconnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_lecconn",
        argNames: ["addr", "addType"],
      );

  Future<SerialResponse> bleLecconnAddr({required String addr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(addr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_lecconn_addr(port_, arg0),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleLecconnAddrConstMeta,
      argValues: [addr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleLecconnAddrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_lecconn_addr",
        argNames: ["addr"],
      );

  Future<SerialResponse> bleLedisc({required int index, dynamic hint}) {
    var arg0 = api2wire_u8(index);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_ledisc(port_, arg0),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleLediscConstMeta,
      argValues: [index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleLediscConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_ledisc",
        argNames: ["index"],
      );

  Future<SerialResponse> bleLesend(
      {required int index, required String data, dynamic hint}) {
    var arg0 = api2wire_u8(index);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_lesend(port_, arg0, arg1),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleLesendConstMeta,
      argValues: [index, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleLesendConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_lesend",
        argNames: ["index", "data"],
      );

  Future<SerialResponse> bleChinfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ble_chinfo(port_),
      parseSuccessData: _wire2api_serial_response,
      constMeta: kBleChinfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBleChinfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ble_chinfo",
        argNames: [],
      );

  Future<String> halGenerateGetHoldings(
      {required int unitId,
      required int reg,
      required int count,
      dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = api2wire_u16(reg);
    var arg2 = api2wire_u16(count);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_hal_generate_get_holdings(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateGetHoldingsConstMeta,
      argValues: [unitId, reg, count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateGetHoldingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_get_holdings",
        argNames: ["unitId", "reg", "count"],
      );

  Future<String> halGenerateGetCoils(
      {required int unitId,
      required int reg,
      required int count,
      dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = api2wire_u16(reg);
    var arg2 = api2wire_u16(count);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hal_generate_get_coils(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateGetCoilsConstMeta,
      argValues: [unitId, reg, count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateGetCoilsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_get_coils",
        argNames: ["unitId", "reg", "count"],
      );

  Future<String> halGenerateSetCoils(
      {required int unitId,
      required int reg,
      required Uint8List values,
      dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = api2wire_u16(reg);
    var arg2 = _platform.api2wire_uint_8_list(values);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hal_generate_set_coils(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateSetCoilsConstMeta,
      argValues: [unitId, reg, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateSetCoilsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_set_coils",
        argNames: ["unitId", "reg", "values"],
      );

  Future<String> halGenerateSetCoil(
      {required int unitId,
      required int reg,
      required int value,
      dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = api2wire_u16(reg);
    var arg2 = api2wire_u8(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hal_generate_set_coil(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateSetCoilConstMeta,
      argValues: [unitId, reg, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateSetCoilConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_set_coil",
        argNames: ["unitId", "reg", "value"],
      );

  Future<String> halGenerateSetHolding(
      {required int unitId,
      required int reg,
      required int value,
      dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = api2wire_u16(reg);
    var arg2 = api2wire_u16(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_hal_generate_set_holding(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateSetHoldingConstMeta,
      argValues: [unitId, reg, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateSetHoldingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_set_holding",
        argNames: ["unitId", "reg", "value"],
      );

  Future<String> halGenerateSetHoldingsBulk(
      {required int unitId,
      required int reg,
      required Uint16List values,
      dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = api2wire_u16(reg);
    var arg2 = _platform.api2wire_uint_16_list(values);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_hal_generate_set_holdings_bulk(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateSetHoldingsBulkConstMeta,
      argValues: [unitId, reg, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateSetHoldingsBulkConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_set_holdings_bulk",
        argNames: ["unitId", "reg", "values"],
      );

  Future<String> hexEncode({required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hex_encode(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHexEncodeConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHexEncodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hex_encode",
        argNames: ["data"],
      );

  Future<Uint8List> hexDecode({required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hex_decode(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHexDecodeConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHexDecodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hex_decode",
        argNames: ["data"],
      );

  Future<LogicControl> halNewLogicControl(
      {required int index,
      required int scene,
      required Uint8List values,
      dynamic hint}) {
    var arg0 = api2wire_u8(index);
    var arg1 = api2wire_u8(scene);
    var arg2 = _platform.api2wire_uint_8_list(values);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hal_new_logic_control(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_logic_control,
      constMeta: kHalNewLogicControlConstMeta,
      argValues: [index, scene, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalNewLogicControlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_new_logic_control",
        argNames: ["index", "scene", "values"],
      );

  Future<String> halGenerateSetLcHoldings(
      {required int unitId, required LogicControl logicControl, dynamic hint}) {
    var arg0 = api2wire_u8(unitId);
    var arg1 = _platform.api2wire_box_autoadd_logic_control(logicControl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hal_generate_set_lc_holdings(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kHalGenerateSetLcHoldingsConstMeta,
      argValues: [unitId, logicControl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHalGenerateSetLcHoldingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hal_generate_set_lc_holdings",
        argNames: ["unitId", "logicControl"],
      );

  Future<Uint8List> convertU16SToU8S({required Uint16List data, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_16_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_convert_u16s_to_u8s(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kConvertU16SToU8SConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConvertU16SToU8SConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "convert_u16s_to_u8s",
        argNames: ["data"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  LogicControl _wire2api_logic_control(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LogicControl(
      index: _wire2api_u8(arr[0]),
      scene: _wire2api_u8(arr[1]),
      values: _wire2api_uint_8_list(arr[2]),
    );
  }

  Uint16List? _wire2api_opt_uint_16_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_16_list(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  ResponseState _wire2api_response_state(dynamic raw) {
    return ResponseState.values[raw as int];
  }

  SerialResponse _wire2api_serial_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SerialResponse(
      state: _wire2api_response_state(arr[0]),
      data: _wire2api_opt_uint_8_list(arr[1]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint16List _wire2api_uint_16_list(dynamic raw) {
    return raw as Uint16List;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_LogicControl> api2wire_box_autoadd_logic_control(
      LogicControl raw) {
    final ptr = inner.new_box_autoadd_logic_control_0();
    _api_fill_to_wire_logic_control(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_16_list> api2wire_uint_16_list(Uint16List raw) {
    final ans = inner.new_uint_16_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_logic_control(
      LogicControl apiObj, ffi.Pointer<wire_LogicControl> wireObj) {
    _api_fill_to_wire_logic_control(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_logic_control(
      LogicControl apiObj, wire_LogicControl wireObj) {
    wireObj.index = api2wire_u8(apiObj.index);
    wireObj.scene = api2wire_u8(apiObj.scene);
    wireObj.values = api2wire_uint_8_list(apiObj.values);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_ble_validate_response(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_ble_validate_response(
      port_,
      data,
    );
  }

  late final _wire_ble_validate_responsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ble_validate_response');
  late final _wire_ble_validate_response = _wire_ble_validate_responsePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ble_response_parse_u16(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_ble_response_parse_u16(
      port_,
      data,
    );
  }

  late final _wire_ble_response_parse_u16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ble_response_parse_u16');
  late final _wire_ble_response_parse_u16 = _wire_ble_response_parse_u16Ptr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ble_response_parse_bool(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_ble_response_parse_bool(
      port_,
      data,
    );
  }

  late final _wire_ble_response_parse_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ble_response_parse_bool');
  late final _wire_ble_response_parse_bool = _wire_ble_response_parse_boolPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ble_get_ndid(
    int port_,
  ) {
    return _wire_ble_get_ndid(
      port_,
    );
  }

  late final _wire_ble_get_ndidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_ble_get_ndid');
  late final _wire_ble_get_ndid =
      _wire_ble_get_ndidPtr.asFunction<void Function(int)>();

  void wire_ble_at_ndrpt(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> data,
    int retry,
  ) {
    return _wire_ble_at_ndrpt(
      port_,
      id,
      data,
      retry,
    );
  }

  late final _wire_ble_at_ndrptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Uint8)>>('wire_ble_at_ndrpt');
  late final _wire_ble_at_ndrpt = _wire_ble_at_ndrptPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_ble_at_ndrpt_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> data,
    int retry,
  ) {
    return _wire_ble_at_ndrpt_data(
      port_,
      id,
      data,
      retry,
    );
  }

  late final _wire_ble_at_ndrpt_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8)>>('wire_ble_at_ndrpt_data');
  late final _wire_ble_at_ndrpt_data = _wire_ble_at_ndrpt_dataPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_ble_at_ndrpt_test(
    int port_,
  ) {
    return _wire_ble_at_ndrpt_test(
      port_,
    );
  }

  late final _wire_ble_at_ndrpt_testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_ble_at_ndrpt_test');
  late final _wire_ble_at_ndrpt_test =
      _wire_ble_at_ndrpt_testPtr.asFunction<void Function(int)>();

  void wire_ble_set_ndid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_ble_set_ndid(
      port_,
      id,
    );
  }

  late final _wire_ble_set_ndidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_ble_set_ndid');
  late final _wire_ble_set_ndid = _wire_ble_set_ndidPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ble_set_mode(
    int port_,
    int mode,
  ) {
    return _wire_ble_set_mode(
      port_,
      mode,
    );
  }

  late final _wire_ble_set_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_ble_set_mode');
  late final _wire_ble_set_mode =
      _wire_ble_set_modePtr.asFunction<void Function(int, int)>();

  void wire_ble_ndreset(
    int port_,
  ) {
    return _wire_ble_ndreset(
      port_,
    );
  }

  late final _wire_ble_ndresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_ble_ndreset');
  late final _wire_ble_ndreset =
      _wire_ble_ndresetPtr.asFunction<void Function(int)>();

  void wire_ble_restore(
    int port_,
  ) {
    return _wire_ble_restore(
      port_,
    );
  }

  late final _wire_ble_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_ble_restore');
  late final _wire_ble_restore =
      _wire_ble_restorePtr.asFunction<void Function(int)>();

  void wire_ble_reboot(
    int port_,
  ) {
    return _wire_ble_reboot(
      port_,
    );
  }

  late final _wire_ble_rebootPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_ble_reboot');
  late final _wire_ble_reboot =
      _wire_ble_rebootPtr.asFunction<void Function(int)>();

  void wire_ble_scan(
    int port_,
    int typee,
  ) {
    return _wire_ble_scan(
      port_,
      typee,
    );
  }

  late final _wire_ble_scanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_ble_scan');
  late final _wire_ble_scan =
      _wire_ble_scanPtr.asFunction<void Function(int, int)>();

  void wire_ble_lecconn(
    int port_,
    ffi.Pointer<wire_uint_8_list> addr,
    int add_type,
  ) {
    return _wire_ble_lecconn(
      port_,
      addr,
      add_type,
    );
  }

  late final _wire_ble_lecconnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8)>>('wire_ble_lecconn');
  late final _wire_ble_lecconn = _wire_ble_lecconnPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_ble_lecconn_addr(
    int port_,
    ffi.Pointer<wire_uint_8_list> addr,
  ) {
    return _wire_ble_lecconn_addr(
      port_,
      addr,
    );
  }

  late final _wire_ble_lecconn_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ble_lecconn_addr');
  late final _wire_ble_lecconn_addr = _wire_ble_lecconn_addrPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ble_ledisc(
    int port_,
    int index,
  ) {
    return _wire_ble_ledisc(
      port_,
      index,
    );
  }

  late final _wire_ble_lediscPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_ble_ledisc');
  late final _wire_ble_ledisc =
      _wire_ble_lediscPtr.asFunction<void Function(int, int)>();

  void wire_ble_lesend(
    int port_,
    int index,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_ble_lesend(
      port_,
      index,
      data,
    );
  }

  late final _wire_ble_lesendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ble_lesend');
  late final _wire_ble_lesend = _wire_ble_lesendPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ble_chinfo(
    int port_,
  ) {
    return _wire_ble_chinfo(
      port_,
    );
  }

  late final _wire_ble_chinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_ble_chinfo');
  late final _wire_ble_chinfo =
      _wire_ble_chinfoPtr.asFunction<void Function(int)>();

  void wire_hal_generate_get_holdings(
    int port_,
    int unit_id,
    int reg,
    int count,
  ) {
    return _wire_hal_generate_get_holdings(
      port_,
      unit_id,
      reg,
      count,
    );
  }

  late final _wire_hal_generate_get_holdingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint16,
              ffi.Uint16)>>('wire_hal_generate_get_holdings');
  late final _wire_hal_generate_get_holdings =
      _wire_hal_generate_get_holdingsPtr
          .asFunction<void Function(int, int, int, int)>();

  void wire_hal_generate_get_coils(
    int port_,
    int unit_id,
    int reg,
    int count,
  ) {
    return _wire_hal_generate_get_coils(
      port_,
      unit_id,
      reg,
      count,
    );
  }

  late final _wire_hal_generate_get_coilsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint16,
              ffi.Uint16)>>('wire_hal_generate_get_coils');
  late final _wire_hal_generate_get_coils = _wire_hal_generate_get_coilsPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_hal_generate_set_coils(
    int port_,
    int unit_id,
    int reg,
    ffi.Pointer<wire_uint_8_list> values,
  ) {
    return _wire_hal_generate_set_coils(
      port_,
      unit_id,
      reg,
      values,
    );
  }

  late final _wire_hal_generate_set_coilsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint16,
              ffi.Pointer<wire_uint_8_list>)>>('wire_hal_generate_set_coils');
  late final _wire_hal_generate_set_coils =
      _wire_hal_generate_set_coilsPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_hal_generate_set_coil(
    int port_,
    int unit_id,
    int reg,
    int value,
  ) {
    return _wire_hal_generate_set_coil(
      port_,
      unit_id,
      reg,
      value,
    );
  }

  late final _wire_hal_generate_set_coilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint16,
              ffi.Uint8)>>('wire_hal_generate_set_coil');
  late final _wire_hal_generate_set_coil = _wire_hal_generate_set_coilPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_hal_generate_set_holding(
    int port_,
    int unit_id,
    int reg,
    int value,
  ) {
    return _wire_hal_generate_set_holding(
      port_,
      unit_id,
      reg,
      value,
    );
  }

  late final _wire_hal_generate_set_holdingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint16,
              ffi.Uint16)>>('wire_hal_generate_set_holding');
  late final _wire_hal_generate_set_holding = _wire_hal_generate_set_holdingPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_hal_generate_set_holdings_bulk(
    int port_,
    int unit_id,
    int reg,
    ffi.Pointer<wire_uint_16_list> values,
  ) {
    return _wire_hal_generate_set_holdings_bulk(
      port_,
      unit_id,
      reg,
      values,
    );
  }

  late final _wire_hal_generate_set_holdings_bulkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint16,
                  ffi.Pointer<wire_uint_16_list>)>>(
      'wire_hal_generate_set_holdings_bulk');
  late final _wire_hal_generate_set_holdings_bulk =
      _wire_hal_generate_set_holdings_bulkPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_16_list>)>();

  void wire_hex_encode(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_hex_encode(
      port_,
      data,
    );
  }

  late final _wire_hex_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_hex_encode');
  late final _wire_hex_encode = _wire_hex_encodePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_hex_decode(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_hex_decode(
      port_,
      data,
    );
  }

  late final _wire_hex_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_hex_decode');
  late final _wire_hex_decode = _wire_hex_decodePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_hal_new_logic_control(
    int port_,
    int index,
    int scene,
    ffi.Pointer<wire_uint_8_list> values,
  ) {
    return _wire_hal_new_logic_control(
      port_,
      index,
      scene,
      values,
    );
  }

  late final _wire_hal_new_logic_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Uint8,
              ffi.Pointer<wire_uint_8_list>)>>('wire_hal_new_logic_control');
  late final _wire_hal_new_logic_control =
      _wire_hal_new_logic_controlPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_hal_generate_set_lc_holdings(
    int port_,
    int unit_id,
    ffi.Pointer<wire_LogicControl> logic_control,
  ) {
    return _wire_hal_generate_set_lc_holdings(
      port_,
      unit_id,
      logic_control,
    );
  }

  late final _wire_hal_generate_set_lc_holdingsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Uint8, ffi.Pointer<wire_LogicControl>)>>(
      'wire_hal_generate_set_lc_holdings');
  late final _wire_hal_generate_set_lc_holdings =
      _wire_hal_generate_set_lc_holdingsPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_LogicControl>)>();

  void wire_convert_u16s_to_u8s(
    int port_,
    ffi.Pointer<wire_uint_16_list> data,
  ) {
    return _wire_convert_u16s_to_u8s(
      port_,
      data,
    );
  }

  late final _wire_convert_u16s_to_u8sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_16_list>)>>('wire_convert_u16s_to_u8s');
  late final _wire_convert_u16s_to_u8s = _wire_convert_u16s_to_u8sPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_16_list>)>();

  ffi.Pointer<wire_LogicControl> new_box_autoadd_logic_control_0() {
    return _new_box_autoadd_logic_control_0();
  }

  late final _new_box_autoadd_logic_control_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LogicControl> Function()>>(
          'new_box_autoadd_logic_control_0');
  late final _new_box_autoadd_logic_control_0 =
      _new_box_autoadd_logic_control_0Ptr
          .asFunction<ffi.Pointer<wire_LogicControl> Function()>();

  ffi.Pointer<wire_uint_16_list> new_uint_16_list_0(
    int len,
  ) {
    return _new_uint_16_list_0(
      len,
    );
  }

  late final _new_uint_16_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_16_list> Function(
              ffi.Int32)>>('new_uint_16_list_0');
  late final _new_uint_16_list_0 = _new_uint_16_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_16_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_uint_16_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> ptr;

  @ffi.Int32()
  external int len;
}

class wire_LogicControl extends ffi.Struct {
  @ffi.Uint8()
  external int index;

  @ffi.Uint8()
  external int scene;

  external ffi.Pointer<wire_uint_8_list> values;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int EUI48LEN = 6;

const int EUI64LEN = 8;

const int X0 = 0;

const int X1 = 1;

const int X2 = 2;

const int X3 = 3;

const int X4 = 4;

const int X5 = 5;

const int X6 = 6;

const int X7 = 7;

const int X8 = 8;

const int X9 = 9;

const int X10 = 10;

const int X11 = 11;

const int X12 = 12;

const int X13 = 13;

const int X14 = 14;

const int X15 = 15;

const int X16 = 16;

const int X17 = 17;

const int X18 = 18;

const int X19 = 19;

const int X20 = 20;

const int D20 = 2196;

const int D21 = 2197;

const int D22 = 2198;

const int D23 = 2199;

const int D24 = 2200;

const int D25 = 2201;

const int D26 = 2202;

const int D27 = 2203;

const int D28 = 2204;

const int D29 = 2205;

const int D30 = 2206;

const int D31 = 2207;

const int D32 = 2208;

const int D33 = 2209;

const int D34 = 2210;

const int D35 = 2211;

const int D36 = 2212;

const int D37 = 2213;

const int D38 = 2214;

const int D39 = 2215;

const int D40 = 2216;

const int D41 = 2217;

const int D42 = 2218;

const int D43 = 2219;

const int D44 = 2220;

const int D45 = 2221;

const int D46 = 2222;

const int D47 = 2223;

const int D48 = 2224;

const int D49 = 2225;

const int D50 = 2226;

const int D51 = 2227;

const int D52 = 2228;

const int D53 = 2229;

const int D54 = 2230;

const int D55 = 2231;

const int D56 = 2232;

const int D57 = 2233;

const int D58 = 2234;

const int D59 = 2235;

const int D60 = 2236;

const int D61 = 2237;

const int D62 = 2238;

const int D63 = 2239;

const int D64 = 2240;

const int D65 = 2241;

const int D66 = 2242;

const int D67 = 2243;

const int D68 = 2244;

const int D69 = 2245;

const int D70 = 2246;

const int D71 = 2247;

const int D72 = 2248;

const int D73 = 2249;

const int D74 = 2250;

const int D75 = 2251;

const int D76 = 2252;

const int D77 = 2253;

const int D78 = 2254;

const int D79 = 2255;

const int D80 = 2256;

const int D81 = 2257;

const int D82 = 2258;

const int D83 = 2259;

const int D84 = 2260;

const int D85 = 2261;

const int D86 = 2262;

const int D87 = 2263;

const int D88 = 2264;

const int D89 = 2265;

const int D90 = 2266;

const int D91 = 2267;

const int D92 = 2268;

const int D93 = 2269;

const int D94 = 2270;

const int D95 = 2271;

const int D96 = 2272;

const int D97 = 2273;

const int D98 = 2274;
