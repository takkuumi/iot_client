// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_logic_control(LogicControl raw) {
    return api2wire_logic_control(raw);
  }

  @protected
  List<dynamic> api2wire_logic_control(LogicControl raw) {
    return [
      api2wire_u8(raw.index),
      api2wire_u8(raw.scene),
      api2wire_uint_8_list(raw.values)
    ];
  }

  @protected
  Uint16List api2wire_uint_16_list(Uint16List raw) {
    return raw;
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_init_log(NativePortType port_);

  external dynamic /* void */ wire_ble_validate_response(
      NativePortType port_, Uint8List data);

  external dynamic /* void */ wire_ble_response_parse_u16(
      NativePortType port_, Uint8List data);

  external dynamic /* void */ wire_ble_response_parse_bool(
      NativePortType port_, Uint8List data);

  external dynamic /* void */ wire_ble_ports(NativePortType port_);

  external dynamic /* void */ wire_ble_scan(NativePortType port_, int typee);

  external dynamic /* void */ wire_ble_lecconn(
      NativePortType port_, String addr, int add_type);

  external dynamic /* void */ wire_ble_ledisc(NativePortType port_, int index);

  external dynamic /* void */ wire_ble_lesend(
      NativePortType port_, int index, String data);

  external dynamic /* void */ wire_ble_tpmode(NativePortType port_);

  external dynamic /* void */ wire_ble_reboot(NativePortType port_);

  external dynamic /* void */ wire_ble_chinfo(NativePortType port_);

  external dynamic /* void */ wire_ble_uartcfg(NativePortType port_);

  external dynamic /* void */ wire_hal_generate_get_holdings(
      NativePortType port_, int unit_id, int reg, int count);

  external dynamic /* void */ wire_hal_generate_get_coils(
      NativePortType port_, int unit_id, int reg, int count);

  external dynamic /* void */ wire_hal_generate_set_coils(
      NativePortType port_, int unit_id, int reg, Uint8List values);

  external dynamic /* void */ wire_hal_generate_set_coil(
      NativePortType port_, int unit_id, int reg, int value);

  external dynamic /* void */ wire_hal_generate_set_holding(
      NativePortType port_, int unit_id, int reg, int value);

  external dynamic /* void */ wire_hal_generate_set_holdings_bulk(
      NativePortType port_, int unit_id, int reg, Uint16List values);

  external dynamic /* void */ wire_hex_encode(
      NativePortType port_, Uint8List data);

  external dynamic /* void */ wire_hex_decode(
      NativePortType port_, String data);

  external dynamic /* void */ wire_hal_new_logic_control(
      NativePortType port_, int index, int scene, Uint8List values);

  external dynamic /* void */ wire_hal_generate_set_lc_holdings(
      NativePortType port_, int unit_id, List<dynamic> logic_control);

  external dynamic /* void */ wire_convert_u16s_to_u8s(
      NativePortType port_, Uint16List data);

  external dynamic /* void */ wire_hal_read_device_settings(
      NativePortType port_, int index);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_init_log(NativePortType port_) => wasmModule.wire_init_log(port_);

  void wire_ble_validate_response(NativePortType port_, Uint8List data) =>
      wasmModule.wire_ble_validate_response(port_, data);

  void wire_ble_response_parse_u16(NativePortType port_, Uint8List data) =>
      wasmModule.wire_ble_response_parse_u16(port_, data);

  void wire_ble_response_parse_bool(NativePortType port_, Uint8List data) =>
      wasmModule.wire_ble_response_parse_bool(port_, data);

  void wire_ble_ports(NativePortType port_) => wasmModule.wire_ble_ports(port_);

  void wire_ble_scan(NativePortType port_, int typee) =>
      wasmModule.wire_ble_scan(port_, typee);

  void wire_ble_lecconn(NativePortType port_, String addr, int add_type) =>
      wasmModule.wire_ble_lecconn(port_, addr, add_type);

  void wire_ble_ledisc(NativePortType port_, int index) =>
      wasmModule.wire_ble_ledisc(port_, index);

  void wire_ble_lesend(NativePortType port_, int index, String data) =>
      wasmModule.wire_ble_lesend(port_, index, data);

  void wire_ble_tpmode(NativePortType port_) =>
      wasmModule.wire_ble_tpmode(port_);

  void wire_ble_reboot(NativePortType port_) =>
      wasmModule.wire_ble_reboot(port_);

  void wire_ble_chinfo(NativePortType port_) =>
      wasmModule.wire_ble_chinfo(port_);

  void wire_ble_uartcfg(NativePortType port_) =>
      wasmModule.wire_ble_uartcfg(port_);

  void wire_hal_generate_get_holdings(
          NativePortType port_, int unit_id, int reg, int count) =>
      wasmModule.wire_hal_generate_get_holdings(port_, unit_id, reg, count);

  void wire_hal_generate_get_coils(
          NativePortType port_, int unit_id, int reg, int count) =>
      wasmModule.wire_hal_generate_get_coils(port_, unit_id, reg, count);

  void wire_hal_generate_set_coils(
          NativePortType port_, int unit_id, int reg, Uint8List values) =>
      wasmModule.wire_hal_generate_set_coils(port_, unit_id, reg, values);

  void wire_hal_generate_set_coil(
          NativePortType port_, int unit_id, int reg, int value) =>
      wasmModule.wire_hal_generate_set_coil(port_, unit_id, reg, value);

  void wire_hal_generate_set_holding(
          NativePortType port_, int unit_id, int reg, int value) =>
      wasmModule.wire_hal_generate_set_holding(port_, unit_id, reg, value);

  void wire_hal_generate_set_holdings_bulk(
          NativePortType port_, int unit_id, int reg, Uint16List values) =>
      wasmModule.wire_hal_generate_set_holdings_bulk(
          port_, unit_id, reg, values);

  void wire_hex_encode(NativePortType port_, Uint8List data) =>
      wasmModule.wire_hex_encode(port_, data);

  void wire_hex_decode(NativePortType port_, String data) =>
      wasmModule.wire_hex_decode(port_, data);

  void wire_hal_new_logic_control(
          NativePortType port_, int index, int scene, Uint8List values) =>
      wasmModule.wire_hal_new_logic_control(port_, index, scene, values);

  void wire_hal_generate_set_lc_holdings(
          NativePortType port_, int unit_id, List<dynamic> logic_control) =>
      wasmModule.wire_hal_generate_set_lc_holdings(
          port_, unit_id, logic_control);

  void wire_convert_u16s_to_u8s(NativePortType port_, Uint16List data) =>
      wasmModule.wire_convert_u16s_to_u8s(port_, data);

  void wire_hal_read_device_settings(NativePortType port_, int index) =>
      wasmModule.wire_hal_read_device_settings(port_, index);
}
