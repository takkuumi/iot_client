// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Uint8List> getNdid({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_ndid(port_),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kGetNdidConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNdidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_ndid",
        argNames: [],
      );

  Future<Uint8List> atNdrpt(
      {required String id, required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_at_ndrpt(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAtNdrptConstMeta,
      argValues: [id, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAtNdrptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "at_ndrpt",
        argNames: ["id", "data"],
      );

  Future<Uint8List> atNdrptTest({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_at_ndrpt_test(port_),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAtNdrptTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAtNdrptTestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "at_ndrpt_test",
        argNames: [],
      );

  Future<Uint8List> setNdid({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_ndid(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSetNdidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetNdidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_ndid",
        argNames: ["id"],
      );

  Future<Uint8List> setMode({required int mode, dynamic hint}) {
    var arg0 = api2wire_u8(mode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_mode(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSetModeConstMeta,
      argValues: [mode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_mode",
        argNames: ["mode"],
      );

  Future<Uint8List> ndreset({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ndreset(port_),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kNdresetConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNdresetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ndreset",
        argNames: [],
      );

  Future<Uint8List> restore({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_restore(port_),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kRestoreConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRestoreConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "restore",
        argNames: [],
      );

  Future<Uint8List> reboot({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_reboot(port_),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kRebootConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRebootConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reboot",
        argNames: [],
      );

  Future<String> printA({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_print_a(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kPrintAConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrintAConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "print_a",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_get_ndid(
    int port_,
  ) {
    return _wire_get_ndid(
      port_,
    );
  }

  late final _wire_get_ndidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_ndid');
  late final _wire_get_ndid =
      _wire_get_ndidPtr.asFunction<void Function(int)>();

  void wire_at_ndrpt(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_at_ndrpt(
      port_,
      id,
      data,
    );
  }

  late final _wire_at_ndrptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_at_ndrpt');
  late final _wire_at_ndrpt = _wire_at_ndrptPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_at_ndrpt_test(
    int port_,
  ) {
    return _wire_at_ndrpt_test(
      port_,
    );
  }

  late final _wire_at_ndrpt_testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_at_ndrpt_test');
  late final _wire_at_ndrpt_test =
      _wire_at_ndrpt_testPtr.asFunction<void Function(int)>();

  void wire_set_ndid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_set_ndid(
      port_,
      id,
    );
  }

  late final _wire_set_ndidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_ndid');
  late final _wire_set_ndid = _wire_set_ndidPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_mode(
    int port_,
    int mode,
  ) {
    return _wire_set_mode(
      port_,
      mode,
    );
  }

  late final _wire_set_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_set_mode');
  late final _wire_set_mode =
      _wire_set_modePtr.asFunction<void Function(int, int)>();

  void wire_ndreset(
    int port_,
  ) {
    return _wire_ndreset(
      port_,
    );
  }

  late final _wire_ndresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_ndreset');
  late final _wire_ndreset = _wire_ndresetPtr.asFunction<void Function(int)>();

  void wire_restore(
    int port_,
  ) {
    return _wire_restore(
      port_,
    );
  }

  late final _wire_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_restore');
  late final _wire_restore = _wire_restorePtr.asFunction<void Function(int)>();

  void wire_reboot(
    int port_,
  ) {
    return _wire_reboot(
      port_,
    );
  }

  late final _wire_rebootPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_reboot');
  late final _wire_reboot = _wire_rebootPtr.asFunction<void Function(int)>();

  void wire_print_a(
    int port_,
  ) {
    return _wire_print_a(
      port_,
    );
  }

  late final _wire_print_aPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_print_a');
  late final _wire_print_a = _wire_print_aPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
