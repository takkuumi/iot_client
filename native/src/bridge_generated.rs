#![allow(
  non_camel_case_types,
  unused,
  clippy::redundant_closure,
  clippy::useless_conversion,
  clippy::unit_arg,
  clippy::double_parens,
  non_snake_case,
  clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::{ffi::c_void, sync::Arc};

// Section: imports

use crate::{
  hal::{Com, LogicControl},
  serial::{ResponseState, SerialResponse},
};

// Section: wire functions

fn wire_ble_validate_response_impl(port_: MessagePort, data: impl Wire2Api<Vec<u8>> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_validate_response",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_data = data.wire2api();
      move |task_callback| Ok(ble_validate_response(api_data))
    },
  )
}
fn wire_ble_response_parse_u16_impl(port_: MessagePort, data: impl Wire2Api<Vec<u8>> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_response_parse_u16",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_data = data.wire2api();
      move |task_callback| Ok(ble_response_parse_u16(api_data))
    },
  )
}
fn wire_ble_response_parse_bool_impl(
  port_: MessagePort,
  data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_response_parse_bool",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_data = data.wire2api();
      move |task_callback| Ok(ble_response_parse_bool(api_data))
    },
  )
}
fn wire_ble_get_ndid_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_get_ndid",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(ble_get_ndid()),
  )
}
fn wire_ble_at_ndrpt_impl(
  port_: MessagePort,
  id: impl Wire2Api<String> + UnwindSafe,
  data: impl Wire2Api<String> + UnwindSafe,
  retry: impl Wire2Api<u8> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_at_ndrpt",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_id = id.wire2api();
      let api_data = data.wire2api();
      let api_retry = retry.wire2api();
      move |task_callback| Ok(ble_at_ndrpt(api_id, api_data, api_retry))
    },
  )
}
fn wire_ble_at_ndrpt_data_impl(
  port_: MessagePort,
  id: impl Wire2Api<String> + UnwindSafe,
  data: impl Wire2Api<String> + UnwindSafe,
  retry: impl Wire2Api<u8> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_at_ndrpt_data",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_id = id.wire2api();
      let api_data = data.wire2api();
      let api_retry = retry.wire2api();
      move |task_callback| Ok(ble_at_ndrpt_data(api_id, api_data, api_retry))
    },
  )
}
fn wire_ble_at_ndrpt_test_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_at_ndrpt_test",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(ble_at_ndrpt_test()),
  )
}
fn wire_ble_set_ndid_impl(port_: MessagePort, id: impl Wire2Api<String> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_set_ndid",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_id = id.wire2api();
      move |task_callback| Ok(ble_set_ndid(api_id))
    },
  )
}
fn wire_ble_set_mode_impl(port_: MessagePort, mode: impl Wire2Api<u8> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_set_mode",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_mode = mode.wire2api();
      move |task_callback| Ok(ble_set_mode(api_mode))
    },
  )
}
fn wire_ble_ndreset_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_ndreset",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(ble_ndreset()),
  )
}
fn wire_ble_restore_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_restore",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(ble_restore()),
  )
}
fn wire_ble_reboot_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_reboot",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(ble_reboot()),
  )
}
fn wire_ble_scan_impl(port_: MessagePort, typee: impl Wire2Api<u8> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_scan",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_typee = typee.wire2api();
      move |task_callback| Ok(ble_scan(api_typee))
    },
  )
}
fn wire_ble_lecconn_impl(
  port_: MessagePort,
  addr: impl Wire2Api<String> + UnwindSafe,
  add_type: impl Wire2Api<u8> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_lecconn",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_addr = addr.wire2api();
      let api_add_type = add_type.wire2api();
      move |task_callback| Ok(ble_lecconn(api_addr, api_add_type))
    },
  )
}
fn wire_ble_lecconn_addr_impl(port_: MessagePort, addr: impl Wire2Api<String> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_lecconn_addr",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_addr = addr.wire2api();
      move |task_callback| Ok(ble_lecconn_addr(api_addr))
    },
  )
}
fn wire_ble_ledisc_impl(port_: MessagePort, index: impl Wire2Api<u8> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_ledisc",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_index = index.wire2api();
      move |task_callback| Ok(ble_ledisc(api_index))
    },
  )
}
fn wire_ble_lesend_impl(
  port_: MessagePort,
  index: impl Wire2Api<u8> + UnwindSafe,
  data: impl Wire2Api<String> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_lesend",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_index = index.wire2api();
      let api_data = data.wire2api();
      move |task_callback| Ok(ble_lesend(api_index, api_data))
    },
  )
}
fn wire_ble_chinfo_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "ble_chinfo",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(ble_chinfo()),
  )
}
fn wire_hal_generate_get_holdings_impl(
  port_: MessagePort,
  unit_id: impl Wire2Api<u8> + UnwindSafe,
  reg: impl Wire2Api<u16> + UnwindSafe,
  count: impl Wire2Api<u16> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_generate_get_holdings",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_unit_id = unit_id.wire2api();
      let api_reg = reg.wire2api();
      let api_count = count.wire2api();
      move |task_callback| Ok(hal_generate_get_holdings(api_unit_id, api_reg, api_count))
    },
  )
}
fn wire_hal_generate_get_coils_impl(
  port_: MessagePort,
  unit_id: impl Wire2Api<u8> + UnwindSafe,
  reg: impl Wire2Api<u16> + UnwindSafe,
  count: impl Wire2Api<u16> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_generate_get_coils",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_unit_id = unit_id.wire2api();
      let api_reg = reg.wire2api();
      let api_count = count.wire2api();
      move |task_callback| Ok(hal_generate_get_coils(api_unit_id, api_reg, api_count))
    },
  )
}
fn wire_hal_generate_set_coils_impl(
  port_: MessagePort,
  unit_id: impl Wire2Api<u8> + UnwindSafe,
  reg: impl Wire2Api<u16> + UnwindSafe,
  values: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_generate_set_coils",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_unit_id = unit_id.wire2api();
      let api_reg = reg.wire2api();
      let api_values = values.wire2api();
      move |task_callback| Ok(hal_generate_set_coils(api_unit_id, api_reg, api_values))
    },
  )
}
fn wire_hal_generate_set_holding_impl(
  port_: MessagePort,
  unit_id: impl Wire2Api<u8> + UnwindSafe,
  reg: impl Wire2Api<u16> + UnwindSafe,
  value: impl Wire2Api<u16> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_generate_set_holding",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_unit_id = unit_id.wire2api();
      let api_reg = reg.wire2api();
      let api_value = value.wire2api();
      move |task_callback| Ok(hal_generate_set_holding(api_unit_id, api_reg, api_value))
    },
  )
}
fn wire_hal_generate_set_holdings_bulk_impl(
  port_: MessagePort,
  unit_id: impl Wire2Api<u8> + UnwindSafe,
  reg: impl Wire2Api<u16> + UnwindSafe,
  values: impl Wire2Api<Vec<u16>> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_generate_set_holdings_bulk",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_unit_id = unit_id.wire2api();
      let api_reg = reg.wire2api();
      let api_values = values.wire2api();
      move |task_callback| {
        Ok(hal_generate_set_holdings_bulk(
          api_unit_id,
          api_reg,
          api_values,
        ))
      }
    },
  )
}
fn wire_hex_encode_impl(port_: MessagePort, data: impl Wire2Api<Vec<u8>> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hex_encode",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_data = data.wire2api();
      move |task_callback| Ok(hex_encode(api_data))
    },
  )
}
fn wire_hex_decode_impl(port_: MessagePort, data: impl Wire2Api<String> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hex_decode",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_data = data.wire2api();
      move |task_callback| Ok(hex_decode(api_data))
    },
  )
}
fn wire_hal_new_control_impl(
  port_: MessagePort,
  index: impl Wire2Api<u8> + UnwindSafe,
  scene: impl Wire2Api<u8> + UnwindSafe,
  coms: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_new_control",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_index = index.wire2api();
      let api_scene = scene.wire2api();
      let api_coms = coms.wire2api();
      move |task_callback| Ok(hal_new_control(api_index, api_scene, api_coms))
    },
  )
}
fn wire_hal_control_impl(
  port_: MessagePort,
  unit_id: impl Wire2Api<u8> + UnwindSafe,
  index: impl Wire2Api<u8> + UnwindSafe,
  scene: impl Wire2Api<u8> + UnwindSafe,
  values: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_control",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_unit_id = unit_id.wire2api();
      let api_index = index.wire2api();
      let api_scene = scene.wire2api();
      let api_values = values.wire2api();
      move |task_callback| Ok(hal_control(api_unit_id, api_index, api_scene, api_values))
    },
  )
}
fn wire_hal_display_com_impl(port_: MessagePort, com: impl Wire2Api<Com> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_display_com",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_com = com.wire2api();
      move |task_callback| Ok(hal_display_com(api_com))
    },
  )
}
fn wire_hal_new_com_impl(port_: MessagePort, value: impl Wire2Api<u32> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_new_com",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_value = value.wire2api();
      move |task_callback| Ok(hal_new_com(api_value))
    },
  )
}
fn wire_hal_get_com_indexs_impl(port_: MessagePort, indexs: impl Wire2Api<Vec<u8>> + UnwindSafe) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_get_com_indexs",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_indexs = indexs.wire2api();
      move |task_callback| Ok(hal_get_com_indexs(api_indexs))
    },
  )
}
fn wire_hal_read_logic_control_impl(
  port_: MessagePort,
  id: impl Wire2Api<String> + UnwindSafe,
  retry: impl Wire2Api<u8> + UnwindSafe,
  index: impl Wire2Api<u8> + UnwindSafe,
) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "hal_read_logic_control",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || {
      let api_id = id.wire2api();
      let api_retry = retry.wire2api();
      let api_index = index.wire2api();
      move |task_callback| Ok(hal_read_logic_control(api_id, api_retry, api_index))
    },
  )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
  fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
  *mut S: Wire2Api<T>,
{
  fn wire2api(self) -> Option<T> {
    (!self.is_null()).then(|| self.wire2api())
  }
}

impl Wire2Api<u16> for u16 {
  fn wire2api(self) -> u16 {
    self
  }
}
impl Wire2Api<u32> for u32 {
  fn wire2api(self) -> u32 {
    self
  }
}
impl Wire2Api<u8> for u8 {
  fn wire2api(self) -> u8 {
    self
  }
}

// Section: impl IntoDart

impl support::IntoDart for Com {
  fn into_dart(self) -> support::DartAbi {
    vec![self.0.into_dart()].into_dart()
  }
}
impl support::IntoDartExceptPrimitive for Com {}

impl support::IntoDart for LogicControl {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.index.into_dart(),
      self.scene.into_dart(),
      self.coms.into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for LogicControl {}

impl support::IntoDart for ResponseState {
  fn into_dart(self) -> support::DartAbi {
    match self {
      Self::Ok => 0,
      Self::FailedOpenDevice => 1,
      Self::Timeout => 2,
      Self::Unknown => 3,
      Self::MaxRetry => 4,
      Self::MaxSendRetry => 5,
      Self::ReadResponseError => 6,
    }
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for ResponseState {}
impl support::IntoDart for SerialResponse {
  fn into_dart(self) -> support::DartAbi {
    vec![self.state.into_dart(), self.data.into_dart()].into_dart()
  }
}
impl support::IntoDartExceptPrimitive for SerialResponse {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
